rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas Públicas: Permiten la lectura para que la landing page cargue.
    match /landing_configs/{docId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    match /landingPlans/{planId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Reglas para la colección de usuarios
    match /users/{userId} {
      // Un usuario puede leer y escribir su propio documento.
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Un superadmin puede leer y escribir cualquier documento de usuario.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Reglas para la colección de compañías
    match /companies/{companyId} {
      // El superadmin puede leer y escribir.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      // Los usuarios autenticados que pertenecen a la compañía pueden leer los datos.
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
      // Solo el admin de la compañía puede actualizarla.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    // Reglas para subcolecciones dentro de una compañía (ej. platos, mesas, pedidos)
    match /companies/{companyId}/{subcollection}/{docId} {
        // Los usuarios que pertenecen a la compañía pueden leer y escribir.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
        // El superadmin puede leer y escribir.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Reglas para pedidos, reservas, mesas y platos (colecciones de nivel raíz)
    match /orders/{orderId} {
      // Solo usuarios autenticados pueden crear.
      allow create: if request.auth != null;
      // El superadmin y el personal de la empresa pueden leer/escribir.
      allow read, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.restaurantId);
    }

    match /reservations/{reservationId} {
      // Cualquiera puede crear una reserva (formulario público).
      allow create: if true;
      // El superadmin y el personal de la empresa pueden leer/escribir.
      allow read, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.restaurantId);
    }

    match /tables/{tableId} {
       // El superadmin y el personal de la empresa pueden leer/escribir.
       allow read, write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.restaurantId);
    }

    match /dishes/{dishId} {
        // Cualquiera puede leer los platos (para el menú público).
        allow read: if true;
        // El superadmin y el personal de la empresa pueden escribir.
        allow write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId);
    }
    
    match /supportTickets/{ticketId} {
        allow create, read, write: if request.auth != null;
    }
  }
}
