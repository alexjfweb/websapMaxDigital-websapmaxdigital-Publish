rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Reglas Públicas (Solo Lectura)
    // =================================

    // Cualquiera puede leer la configuración de la landing page. Nadie puede escribir.
    match /landing_configs/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // Cualquiera puede leer los planes de suscripción públicos y activos.
    match /landingPlans/{planId} {
      allow read: if resource.data.isActive == true && resource.data.isPublic == true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // =================================
    // Reglas de Administrador y Superadministrador
    // =================================

    // Superadmins pueden gestionar todos los planes, incluso los no públicos.
    match /landingPlans/{planId} {
      allow get, list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Los logs de auditoría solo son accesibles para superadmins.
    match /globalAuditLogs/{logId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    match /planAuditLogs/{logId} {
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Superadmins pueden gestionar la configuración de navegación y pagos.
    match /configuration/{docId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
     match /payment_methods/{docId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // =================================
    // Reglas de Usuario Autenticado
    // =================================

    // Un usuario puede leer su propio documento, pero no el de otros (excepto superadmins).
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow list, create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Las compañías pueden ser leídas por sus miembros y gestionadas por sus admins/superadmins.
    match /companies/{companyId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow create, list, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Los datos específicos de una compañía (platos, pedidos, etc.) solo son accesibles por miembros de esa compañía.
    match /{collection}/{docId} {
      allow read, write: if request.auth != null && 
                          request.resource.data.companyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }
    
     // Las reservas pueden ser creadas por cualquiera, pero solo leídas/modificadas por miembros del restaurante.
    match /reservations/{reservationId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && 
                                   resource.data.restaurantId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }
    
    // Los pedidos pueden ser creados por cualquiera.
     match /orders/{orderId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && 
                                   resource.data.restaurantId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }
    
     // Denegar todo lo demás por defecto.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
