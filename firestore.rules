
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // ===================================
    // Reglas Públicas (Solo Lectura)
    // ===================================
    
    // Cualquiera puede leer la configuración de la landing y los planes.
    match /landing_configs/{docId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    match /landingPlans/{planId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // El menú público de un restaurante (sus platos) es de lectura pública.
    match /dishes/{dishId} {
      allow read: if true;
      // La escritura de platos está protegida más abajo.
    }
    
    // ===================================
    // Reglas de Autenticación Requerida
    // ===================================

    // Función para verificar si un usuario está logueado.
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Función para obtener los datos del usuario que hace la petición.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // ===================================
    // Reglas Específicas de Colecciones
    // ===================================

    // Colección de Usuarios
    match /users/{userId} {
      // Un usuario puede leer y actualizar su propio perfil.
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      // Solo un superadmin puede crear o eliminar usuarios (protección básica).
      allow create, delete: if isSignedIn() && getUserData().role == 'superadmin';
    }
    
    // Colección de Empresas
    match /companies/{companyId} {
      // Un usuario puede leer los datos de su propia compañía.
      allow read: if isSignedIn() && getUserData().companyId == companyId;
      // Solo el admin de esa compañía o un superadmin pueden actualizarla.
      allow update: if isSignedIn() && (getUserData().companyId == companyId && getUserData().role == 'admin') || getUserData().role == 'superadmin';
      // Solo superadmins pueden crear empresas.
      allow create: if isSignedIn() && getUserData().role == 'superadmin';
    }
    
    // Reglas para Sub-colecciones de Empresas (Platos, Pedidos, etc.)
    // Esto asume que cada documento en estas colecciones tiene un campo `companyId` o `restaurantId`.
    match /{collection}/{docId} {
      // Pedidos, platos, mesas, reservas, empleados...
      allow read, write: if isSignedIn() && getUserData().companyId == resource.data.companyId || getUserData().companyId == resource.data.restaurantId;
      
      // Permitir que los superadmin también tengan acceso total.
      allow read, write: if isSignedIn() && getUserData().role == 'superadmin';
    }
    
    // Reglas para Logs de Auditoría (solo superadmin)
    match /globalAuditLogs/{logId} {
       allow read, write: if isSignedIn() && getUserData().role == 'superadmin';
    }
    
     // Reglas para Tickets de Soporte
    match /supportTickets/{ticketId} {
      // El usuario puede crear su propio ticket.
      allow create: if isSignedIn();
      // El usuario puede leer su propio ticket, o un superadmin puede leerlo.
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || getUserData().role == 'superadmin');
      // Solo un superadmin puede actualizar el ticket (ej. cambiar estado).
      allow update: if isSignedIn() && getUserData().role == 'superadmin';
    }

  }
}
